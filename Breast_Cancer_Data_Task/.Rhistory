#Installed the class package
installed.packages("class")
library(class)
#Installed the ggplot class
install.packages("ggplot2")
library(ggplot2)
#Setting the working directory
setwd("C:/Users/Admin/Documents/R Projects/Breast_Cancer_Data_Task")
#Inputting the data file
RawData <- read.csv("BreastCancerData.csv", header=FALSE)
#The 'c' function puts individual Strings into a String vector. This String vector can
#be added to the DataFrame as a header row with the 'names' function.
names(RawData) <- c("ID","diagnosis","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave points_mean","symmetry_mean","fractal_dimensions_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave points_se","symmetry_se","fractal_dimensions_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave points_worst","symmetry_worse","fractal_dimensions_worse")
#Removing the ID filed and creating a variable called Data_NoID
Data_NoID <- RawData[,-1]
#We also need a subset of the BCD data set without the Result column
#This allows it to be used for normalisation and validation purposes
Data_NoResults <- Data_NoID[,-1]
library(ggplot2)
#Setting the working directory
setwd("C:/Users/Admin/Documents/R Projects/Breast_Cancer_Data_Task")
#Inputting the data file
RawData <- read.csv("BreastCancerData.csv", header=FALSE)
#The 'c' function puts individual Strings into a String vector. This String vector can
#be added to the DataFrame as a header row with the 'names' function.
names(RawData) <- c("ID","diagnosis","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave points_mean","symmetry_mean","fractal_dimensions_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave points_se","symmetry_se","fractal_dimensions_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave points_worst","symmetry_worse","fractal_dimensions_worse")
#Removing the ID filed and creating a variable called Data_NoID
Data_NoID <- RawData[,-1]
#We also need a subset of the BCD data set without the Result column
#This allows it to be used for normalisation and validation purposes
Data_NoResults <- Data_NoID[,-1]
#There are many Feature Scaling functions defined in CRAN, but to learn the maths, it is
#good to built one yourself, like so:
FeatureScaling <- function(x) { ((x - min(x)) / (max(x) - min(x))) }
#Data normalised
Data_Normalised <- as.data.frame(lapply(Data_NoResults, FeatureScaling))
Data_Training <- Data_Normalised[1:400,]
Data_Test <- Data_Normalised[401:569,]
K_Value <- floor(sqrt(length(Data_Training[,1])))
Data_Predictions <- knn(Data_Training,Data_Test,Data_NoID[1:400,1], k=K_Value)
Data_Reference <- Data_NoID[401:569,1]
table(Data_Predictions,Data_Reference)
#Setting the working directory
setwd("C:/Users/Admin/Documents/R Projects/Breast_Cancer_Data_Task")
#Installed the class package
installed.packages("class")
#Installed the class package
installed.packages("class")
library(class)
#Installed the ggplot class
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
#Setting the working directory
setwd("C:/Users/Admin/Documents/R-projects/Breast_Cancer_Data_Task")
#Inputting the data file
RawData <- read.csv("BreastCancerData.csv", header=FALSE)
#The 'c' function puts individual Strings into a String vector. This String vector can
#be added to the DataFrame as a header row with the 'names' function.
names(RawData) <- c("ID","diagnosis","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave points_mean","symmetry_mean","fractal_dimensions_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave points_se","symmetry_se","fractal_dimensions_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave points_worst","symmetry_worse","fractal_dimensions_worse")
#Removing the ID filed and creating a variable called Data_NoID
Data_NoID <- RawData[,-1]
#We also need a subset of the BCD data set without the Result column
#This allows it to be used for normalisation and validation purposes
Data_NoResults <- Data_NoID[,-1]
#There are many Feature Scaling functions defined in CRAN, but to learn the maths, it is
#good to built one yourself, like so:
FeatureScaling <- function(x) { ((x - min(x)) / (max(x) - min(x))) }
#Data normalised
Data_Normalised <- as.data.frame(lapply(Data_NoResults, FeatureScaling))
Data_Training <- Data_Normalised[1:400,]
Data_Test <- Data_Normalised[401:569,]
K_Value <- floor(sqrt(length(Data_Training[,1])))
Data_Predictions <- knn(Data_Training,Data_Test,Data_NoID[1:400,1], k=K_Value)
K_Value <- floor(sqrt(length(Data_Training[,1])))
Data_Predictions <- knn(Data_Training,Data_Test,Data_NoID[1:400,1], k=K_Value)
Data_Reference <- Data_NoID[401:569,1]
table(Data_Predictions,Data_Reference)
K_Value <- floor(sqrt(length(Data_Training[,1])))
#Installed the class package
installed.packages("class")
library(class)
#Installed the ggplot class
install.packages("ggplot2")
library(ggplot2)
#Setting the working directory
setwd("C:/Users/Admin/Documents/R-projects/Breast_Cancer_Data_Task")
#Inputting the data file
RawData <- read.csv("BreastCancerData.csv", header=FALSE)
#The 'c' function puts individual Strings into a String vector. This String vector can
#be added to the DataFrame as a header row with the 'names' function.
names(RawData) <- c("ID","diagnosis","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave points_mean","symmetry_mean","fractal_dimensions_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave points_se","symmetry_se","fractal_dimensions_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave points_worst","symmetry_worse","fractal_dimensions_worse")
#Removing the ID filed and creating a variable called Data_NoID
Data_NoID <- RawData[,-1]
#We also need a subset of the BCD data set without the Result column
#This allows it to be used for normalisation and validation purposes
Data_NoResults <- Data_NoID[,-1]
#There are many Feature Scaling functions defined in CRAN, but to learn the maths, it is
#good to built one yourself, like so:
FeatureScaling <- function(x) { ((x - min(x)) / (max(x) - min(x))) }
#Data normalised
Data_Normalised <- as.data.frame(lapply(Data_NoResults, FeatureScaling))
Data_Training <- Data_Normalised[1:400,]
Data_Test <- Data_Normalised[401:569,]
K_Value <- floor(sqrt(length(Data_Training[,1])))
Data_Predictions <- knn(Data_Training,Data_Test,Data_NoID[1:400,1], k=K_Value)
Data_Reference <- Data_NoID[401:569,1]
table(Data_Predictions,Data_Reference)
install.packages("ggplot2")
K_Value <- floor(sqrt(length(Data_Training[,1])))
library(ggplot2)
#Setting the working directory
setwd("C:/Users/Admin/Documents/R-projects/Breast_Cancer_Data_Task")
#Inputting the data file
RawData <- read.csv("BreastCancerData.csv", header=FALSE)
#The 'c' function puts individual Strings into a String vector. This String vector can
#be added to the DataFrame as a header row with the 'names' function.
names(RawData) <- c("ID","diagnosis","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave points_mean","symmetry_mean","fractal_dimensions_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave points_se","symmetry_se","fractal_dimensions_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave points_worst","symmetry_worse","fractal_dimensions_worse")
#Removing the ID filed and creating a variable called Data_NoID
Data_NoID <- RawData[,-1]
#We also need a subset of the BCD data set without the Result column
#This allows it to be used for normalisation and validation purposes
Data_NoResults <- Data_NoID[,-1]
#There are many Feature Scaling functions defined in CRAN, but to learn the maths, it is
#good to built one yourself, like so:
FeatureScaling <- function(x) { ((x - min(x)) / (max(x) - min(x))) }
#Data normalised
Data_Normalised <- as.data.frame(lapply(Data_NoResults, FeatureScaling))
Data_Training <- Data_Normalised[1:400,]
Data_Test <- Data_Normalised[401:569,]
K_Value <- floor(sqrt(length(Data_Training[,1])))
Data_Predictions <- knn(Data_Training,Data_Test,Data_NoID[1:400,1], k=K_Value)
library(ggplot2)
#Installed the ggplot class
install.packages("ggplot2")
library(class)
library(ggplot2)
RawData <- read.csv("BreastCancerData.csv", header=FALSE)
#The 'c' function puts individual Strings into a String vector. This String vector can
#be added to the DataFrame as a header row with the 'names' function.
names(RawData) <- c("ID","diagnosis","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave points_mean","symmetry_mean","fractal_dimensions_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave points_se","symmetry_se","fractal_dimensions_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave points_worst","symmetry_worse","fractal_dimensions_worse")
#Removing the ID filed and creating a variable called Data_NoID
Data_NoID <- RawData[,-1]
#We also need a subset of the BCD data set without the Result column
#This allows it to be used for normalisation and validation purposes
Data_NoResults <- Data_NoID[,-1]
#There are many Feature Scaling functions defined in CRAN, but to learn the maths, it is
#good to built one yourself, like so:
FeatureScaling <- function(x) { ((x - min(x)) / (max(x) - min(x))) }
#Data normalised
Data_Normalised <- as.data.frame(lapply(Data_NoResults, FeatureScaling))
Data_Training <- Data_Normalised[1:400,]
Data_Test <- Data_Normalised[401:569,]
K_Value <- floor(sqrt(length(Data_Training[,1])))
Data_Predictions <- knn(Data_Training,Data_Test,Data_NoID[1:400,1], k=K_Value)
Data_Reference <- Data_NoID[401:569,1]
table(Data_Predictions,Data_Reference)
Data_Reference
table(Data_Predictions,Data_Reference)
Data_Reference <- Data_NoID[401:569,1]
Data_Reference <- Data_NoID[401:569,1]
Data_Reference <- Data_NoID[451:569,1]
big_errors <- c()
kValues <- c()
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
for(i in c(1:450)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:450,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
big_errors_df <- data.frame(kValues,big_errors)
names(big_errors_df) <- c("k-Value","Error Value")
ggplot(big_errors_df, aes(x = kValues, y = big_errors)) +
geom_point() +
geom_smooth(method = "loess",colour = "blue", size = 1) +
ggtitle("Error vs k-Value for Breast Cancer Data") +
xlab("k-Values") +
ylab("Error") +
theme(axis.text.x=element_text(angle=-45, vjust=0.5)) +
theme(axis.text.y=element_text(angle=-45, hjust=-0.1, vjust=-0.5)) +
scale_colour_manual(values = c("red","blue"))
ggplot(big_errors_df, aes(x = kValues, y = big_errors)) +
geom_point() +
geom_smooth(method = "loess",colour = "blue", size = 1) +
ggtitle("Error vs k-Value for Breast Cancer Data") +
xlab("k-Values") +
ylab("Error") +
theme(axis.text.x=element_text(angle=-45, vjust=0.5)) +
theme(axis.text.y=element_text(angle=-45, hjust=-0.1, vjust=-0.5)) +
scale_colour_manual(values = c("red","blue"))
install.packages("ggplot2")
#Install the ggplot2 package
library(ggplot2)
#Use ggplot2
qplot(Petal.Length, Sepal.Length, data = iris, colour = Species)
#Use the ggplot2's qplot to plot the iris data.
#Note how many fewer arguments are needed compared to 'plot' and
#how a key is created by default
qplot(Petal.Length, Sepal.Length, data = iris, color = Species,
xlab = "Sepal Length", ylab = "Petal Length",
main = "Sepal vs. Petal Length in Fisher's Iris data")
#As above, with axis labels and main title
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line()
#Comparing temperature and pressure from the pressure dataset
#Appending 'geom_[feature]' adds extra display features
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_point() + geom_line()
#Many features can be appended together
#If no features are appended, the graph will be created with no features
ggplot(iris, aes(x = Petal.Length, y = Sepal.Length)) + geom_density2d()
#The ggplot has many different kinds of features
#See the cheat sheet link below for an overview of the options
#https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf
install.packages("ggplot2")
ggplot(quakes, aes(x=depth)) + geom_bar()
ggplot(quakes, aes(x=depth)) + geom_bar(binwidth=50)
library(ggplot2)
ggplot(quakes, aes(x=depth)) + geom_bar()
ggplot(quakes, aes(x=depth)) + geom_bar(binwidth=50)
dat <- data.frame(
time = factor(c("Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(14.89, 17.23)
)
dat
library(ggplot2)
ggplot(data=dat, aes(x=time, y=total_bill)) +
geom_bar(stat="identity")
# Add a black outline
ggplot(data=dat, aes(x=time, y=total_bill, fill=time)) +
geom_bar(colour="black", stat="identity")
# No legend, since the information is redundant
ggplot(data=dat, aes(x=time, y=total_bill, fill=time)) +
geom_bar(colour="black", stat="identity") +
guides(fill=FALSE)
big_errors <- c()
kValues <- c()
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:400,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:400,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
library(class)
big_errors <- c()
kValues <- c()
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:400,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:400,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
RawData <- read.csv("BreastCancerData.csv", header=FALSE)
#The 'c' function puts individual Strings into a String vector. This String vector can
#be added to the DataFrame as a header row with the 'names' function.
names(RawData) <- c("ID","diagnosis","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave points_mean","symmetry_mean","fractal_dimensions_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave points_se","symmetry_se","fractal_dimensions_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave points_worst","symmetry_worse","fractal_dimensions_worse")
#Removing the ID filed and creating a variable called Data_NoID
Data_NoID <- RawData[,-1]
#We also need a subset of the BCD data set without the Result column
#This allows it to be used for normalisation and validation purposes
Data_NoResults <- Data_NoID[,-1]
#There are many Feature Scaling functions defined in CRAN, but to learn the maths, it is
#good to built one yourself, like so:
FeatureScaling <- function(x) { ((x - min(x)) / (max(x) - min(x))) }
#Data normalised
Data_Normalised <- as.data.frame(lapply(Data_NoResults, FeatureScaling))
Data_Training <- Data_Normalised[1:400,]
Data_Test <- Data_Normalised[401:569,]
K_Value <- floor(sqrt(length(Data_Training[,1])))
Data_Predictions <- knn(Data_Training,Data_Test,Data_NoID[1:400,1], k=K_Value)
Data_Reference <- Data_NoID[401:569,1]
table(Data_Predictions,Data_Reference)
big_errors <- c()
kValues <- c()
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:400,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:400,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
big_errors_df <- data.frame(kValues,big_errors)
names(big_errors_df) <- c("k-Value","Error Value")
ggplot(big_errors_df, aes(x = kValues, y = big_errors)) +
geom_point() +
geom_smooth(method = "loess",colour = "blue", size = 1) +
ggtitle("Error vs k-Value for Breast Cancer Data") +
xlab("k-Values") +
ylab("Error") +
theme(axis.text.x=element_text(angle=-45, vjust=0.5)) +
theme(axis.text.y=element_text(angle=-45, hjust=-0.1, vjust=-0.5)) +
scale_colour_manual(values = c("red","blue"))
RawData <- read.csv("BreastCancerData.csv", header=FALSE)
#The 'c' function puts individual Strings into a String vector. This String vector can
#be added to the DataFrame as a header row with the 'names' function.
names(RawData) <- c("ID","diagnosis","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave points_mean","symmetry_mean","fractal_dimensions_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave points_se","symmetry_se","fractal_dimensions_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave points_worst","symmetry_worse","fractal_dimensions_worse")
#Removing the ID filed and creating a variable called Data_NoID
Data_NoID <- RawData[,-1]
#We also need a subset of the BCD data set without the Result column
#This allows it to be used for normalisation and validation purposes
Data_NoResults <- Data_NoID[,-1]
#There are many Feature Scaling functions defined in CRAN, but to learn the maths, it is
#good to built one yourself, like so:
FeatureScaling <- function(x) { ((x - min(x)) / (max(x) - min(x))) }
#Data normalised
Data_Normalised <- as.data.frame(lapply(Data_NoResults, FeatureScaling))
Data_Training <- Data_Normalised[1:400,]
Data_Test <- Data_Normalised[401:569,]
K_Value <- floor(sqrt(length(Data_Training[,1])))
Data_Predictions <- knn(Data_Training,Data_Test,Data_NoID[1:400,1], k=K_Value)
Data_Reference <- Data_NoID[401:569,1]
table(Data_Predictions,Data_Reference)
big_errors <- c()
kValues <- c()
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:400,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:400,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
big_errors_df <- data.frame(kValues,big_errors)
names(big_errors_df) <- c("k-Value","Error Value")
ggplot(big_errors_df, aes(x = kValues, y = big_errors)) +
geom_bar() +
geom_smooth(method = "loess",colour = "blue", size = 1) +
ggtitle("Error vs k-Value for Breast Cancer Data") +
xlab("k-Values") +
ylab("Error") +
theme(axis.text.x=element_text(angle=-45, vjust=0.5)) +
theme(axis.text.y=element_text(angle=-45, hjust=-0.1, vjust=-0.5)) +
scale_colour_manual(values = c("red","blue"))
RawData <- read.csv("BreastCancerData.csv", header=FALSE)
#The 'c' function puts individual Strings into a String vector. This String vector can
#be added to the DataFrame as a header row with the 'names' function.
names(RawData) <- c("ID","diagnosis","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave points_mean","symmetry_mean","fractal_dimensions_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave points_se","symmetry_se","fractal_dimensions_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave points_worst","symmetry_worse","fractal_dimensions_worse")
#Removing the ID filed and creating a variable called Data_NoID
Data_NoID <- RawData[,-1]
#We also need a subset of the BCD data set without the Result column
#This allows it to be used for normalisation and validation purposes
Data_NoResults <- Data_NoID[,-1]
#There are many Feature Scaling functions defined in CRAN, but to learn the maths, it is
#good to built one yourself, like so:
FeatureScaling <- function(x) { ((x - min(x)) / (max(x) - min(x))) }
#Data normalised
Data_Normalised <- as.data.frame(lapply(Data_NoResults, FeatureScaling))
Data_Training <- Data_Normalised[1:400,]
Data_Test <- Data_Normalised[401:569,]
K_Value <- floor(sqrt(length(Data_Training[,1])))
Data_Predictions <- knn(Data_Training,Data_Test,Data_NoID[1:400,1], k=K_Value)
Data_Reference <- Data_NoID[401:569,1]
table(Data_Predictions,Data_Reference)
big_errors <- c()
kValues <- c()
for(i in c(1:100)) {
next_error <-  table(knn(Data_Training,Data_Test,Data_NoID[1:400,1],k=i),Data_Reference)[1,2] +
table(knn(Data_Training,Data_Test,Data_NoID[1:400,1],k=i),Data_Reference)[2,1]
big_errors <- c(big_errors, next_error)
kValues <- c(kValues, i)
}
big_errors_df <- data.frame(kValues,big_errors)
names(big_errors_df) <- c("k-Value","Error Value")
ggplot(big_errors_df, aes(x = kValues, y = big_errors)) +
geom_point() +
geom_smooth(method = "loess",colour = "blue", size = 1) +
ggtitle("Error vs k-Value for Breast Cancer Data") +
xlab("k-Values") +
ylab("Error") +
theme(axis.text.x=element_text(angle=-45, vjust=0.5)) +
theme(axis.text.y=element_text(angle=-45, hjust=-0.1, vjust=-0.5)) +
scale_colour_manual(values = c("red","blue"))
ggplot(big_errors_df, aes(x = kValues, y = big_errors)) +
geom_point() +
geom_smooth(method = "loess",colour = "blue", size = 1) +
ggtitle("Error vs k-Value for Breast Cancer Data") +
xlab("k-Values") +
ylab("Error") +
theme(axis.text.x=element_text(angle=-45, vjust=0.5)) +
theme(axis.text.y=element_text(angle=-45, hjust=-0.1, vjust=-0.5)) +
scale_colour_manual(values = c("green","red"))
newdata <- data(cars)
install.packages(e1071)
library(e1071)
install.packages("e1071")
library(e1071)
?e1071
??e1071
install.packages('rgl')
library(rgl)
data(volcano)
y <- 2 * volcano # Exaggerate the relief
x <- 10 * (1:nrow(y)) # 10 meter spacing (S to N)
z <- 10 * (1:ncol(y)) # 10 meter spacing (E to W)
ylim <- range(y)
ylen <- ylim[2] - ylim[1] + 1
colorlut <- terrain.colors(ylen) # height color lookup table
col <- colorlut[ y-ylim[1]+1 ] # assign colors to heights
rgl.open()
rgl.surface(x, z, y, color=col, back="lines")
data(volcano)
y <- 2 * volcano # Exaggerate the relief
x <- 10 * (1:nrow(y)) # 10 meter spacing (S to N)
z <- 10 * (1:ncol(y)) # 10 meter spacing (E to W)
ylim <- range(y)
ylen <- ylim[2] - ylim[1] + 1
colorlut <- terrain.colors(ylen) # height color lookup table
col <- colorlut[ y-ylim[1]+1 ] # assign colors to heights
rgl.open()
rgl.surface(x, z, y, color=col, back="lines")
library(rgl)
data(volcano)
y <- 2 * volcano # Exaggerate the relief
x <- 10 * (1:nrow(y)) # 10 meter spacing (S to N)
z <- 10 * (1:ncol(y)) # 10 meter spacing (E to W)
ylim <- range(y)
ylen <- ylim[2] - ylim[1] + 1
colorlut <- terrain.colors(ylen) # height color lookup table
col <- colorlut[ y-ylim[1]+1 ] # assign colors to heights
rgl.open()
rgl.surface(x, z, y, color=col, back="lines")
install.packages('rgl')
library(rgl)
iris <- data('iris')
open3d()
plot3d(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Width)
plot3d(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Width, type = 's')
plot3d(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Width, type = 's',
col = as.integer(iris$Species))
install.packages("rgl")
library(rgl)
iris <- data('iris')
open3d()
plot3d(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Width)
plot3d(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Width, type = 's')
plot3d(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Width, type = 's',
col = as.integer(iris$Species))
iris
open3d()
plot3d(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Width, type = 's',
col = as.integer(iris$Species))
iris
plot3d(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Width, type = 's',
col = as.integer(iris$Species))
iris = NULL
iris
daya(iris)
data(iris)
iris
plot3d(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Width)
plot3d(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Width, type = 's')
plot3d(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Width, type = 's',
col = as.integer(iris$Species))
install.packages("rpart")
library(rpart)
data(Glass, package = "mlbench")
install.packages("mlbench")
