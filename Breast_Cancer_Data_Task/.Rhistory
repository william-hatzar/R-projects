21 + 21
print("Hello World")
prime = 0:10
temp = 0
for(val in prime){
if (val == 0){
next
} else if (val == 1){
next
} else if (val == 2){
TRUE
temp = val
} else if (val %% temp == 0){
next
temp = temp + 1
}
print(val)
}
william <- c(21,22,23,24)
william <- c(21,22,23,24)
william[3]
william <- c(21,22,23,24)
william[0]
class(william)
class(william)
typeof(william)
write.csv(mydata, "mycsv.csv")
william <- c(2,4,6,8,10)
write.csv(mydata, "mycsv.csv")
william <- c(2,4,6,8,10)
write.csv(william, "mycsv.csv")
Table1 <- read.csv("mycsv.csv", header = TRUE)
Table1 <- read.csv("mycsv.csv", header = TRUE)
head(Table1)
source('~/.active-rstudio-document')
data("iris")
plot(iris)
boxplot(iris)
plot(iris)
plot(co2)
class(plant)
data
data()
data("CO2")
data(CO2)
CO2
class(plant)
class("type")
class("plant")
mean(CO2$uptake.length)
mean(CO2$uptake)
mean <- mean(CO2$uptake)
mean_uptake <- mean(CO2$uptake)
#Installed the class package
installed.packages("class")
library(class)
#Installed the ggplot class
install.packages("ggplot2")
library(ggplot2)
#Setting the working directory
setwd("C:/Users/Admin/Documents/R Projects/Breast_Cancer_Data_Task")
#Inputting the data file
RawData <- read.csv("BreastCancerData.csv", header=FALSE)
#The 'c' function puts individual Strings into a String vector. This String vector can
#be added to the DataFrame as a header row with the 'names' function.
names(RawData) <- c("ID","diagnosis","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave points_mean","symmetry_mean","fractal_dimensions_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave points_se","symmetry_se","fractal_dimensions_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave points_worst","symmetry_worse","fractal_dimensions_worse")
#Removing the ID filed and creating a variable called Data_NoID
Data_NoID <- RawData[,-1]
#We also need a subset of the BCD data set without the Result column
#This allows it to be used for normalisation and validation purposes
Data_NoResults <- Data_NoID[,-1]
#There are many Feature Scaling functions defined in CRAN, but to learn the maths, it is
#good to built one yourself, like so:
FeatureScaling <- function(x) { ((x - min(x)) / (max(x) - min(x))) }
#Data normalised
Data_Normalised <- as.data.frame(lapply(Data_NoResults, FeatureScaling))
Data_Training <- Data_Normalised[1:400,]
Data_Test <- Data_Normalised[401:569,]
K_Value <- floor(sqrt(length(Data_Training[,1])))
Data_Predictions <- knn(Data_Training,Data_Test,Data_NoID[1:400,1], k=K_Value)
Data_Reference <- Data_NoID[401:569,1]
table(Data_Predictions,Data_Reference)
#Setting the working directory
setwd("C:\Users\willi\Documents\R Projects\R-projects\Breast_Cancer_Data_Task")
#Inputting the data file
RawData <- read.csv("BreastCancerData.csv", header=FALSE)
#The 'c' function puts individual Strings into a String vector. This String vector can
#be added to the DataFrame as a header row with the 'names' function.
names(RawData) <- c("ID","diagnosis","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave points_mean","symmetry_mean","fractal_dimensions_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave points_se","symmetry_se","fractal_dimensions_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave points_worst","symmetry_worse","fractal_dimensions_worse")
#Removing the ID filed and creating a variable called Data_NoID
Data_NoID <- RawData[,-1]
#We also need a subset of the BCD data set without the Result column
#This allows it to be used for normalisation and validation purposes
Data_NoResults <- Data_NoID[,-1]
#There are many Feature Scaling functions defined in CRAN, but to learn the maths, it is
#good to built one yourself, like so:
FeatureScaling <- function(x) { ((x - min(x)) / (max(x) - min(x))) }
#Data normalised
Data_Normalised <- as.data.frame(lapply(Data_NoResults, FeatureScaling))
Data_Training <- Data_Normalised[1:400,]
Data_Test <- Data_Normalised[401:569,]
K_Value <- floor(sqrt(length(Data_Training[,1])))
Data_Predictions <- knn(Data_Training,Data_Test,Data_NoID[1:400,1], k=K_Value)
Data_Reference <- Data_NoID[401:569,1]
table(Data_Predictions,Data_Reference)
#Setting the working directory
setwd("C:\Users\willi\Documents\R Projects\R-projects\Breast_Cancer_Data_Task")
#Inputting the data file
RawData <- read.csv("BreastCancerData.csv", header=FALSE)
#Setting the working directory
setwd("C:/Users/willi/Documents/R Projects/R-projects/Breast_Cancer_Data_Task")
#Inputting the data file
RawData <- read.csv("BreastCancerData.csv", header=FALSE)
#The 'c' function puts individual Strings into a String vector. This String vector can
#be added to the DataFrame as a header row with the 'names' function.
names(RawData) <- c("ID","diagnosis","radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave points_mean","symmetry_mean","fractal_dimensions_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave points_se","symmetry_se","fractal_dimensions_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave points_worst","symmetry_worse","fractal_dimensions_worse")
#Removing the ID filed and creating a variable called Data_NoID
Data_NoID <- RawData[,-1]
#We also need a subset of the BCD data set without the Result column
#This allows it to be used for normalisation and validation purposes
Data_NoResults <- Data_NoID[,-1]
#There are many Feature Scaling functions defined in CRAN, but to learn the maths, it is
#good to built one yourself, like so:
FeatureScaling <- function(x) { ((x - min(x)) / (max(x) - min(x))) }
#Data normalised
Data_Normalised <- as.data.frame(lapply(Data_NoResults, FeatureScaling))
Data_Training <- Data_Normalised[1:400,]
Data_Test <- Data_Normalised[401:569,]
K_Value <- floor(sqrt(length(Data_Training[,1])))
Data_Predictions <- knn(Data_Training,Data_Test,Data_NoID[1:400,1], k=K_Value)
Data_Reference <- Data_NoID[401:569,1]
table(Data_Predictions,Data_Reference)
