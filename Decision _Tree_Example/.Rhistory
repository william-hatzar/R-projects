}else{
print("They are both equal")
}
}
meanChecker(quebec_CO2,Mississippi_CO2)
?pch
//OrchardSprays
summary(OrchardSprays)
summary(OrchardSprays)
max_decrease <- max(decrease$treatment)
print(max_decrease)
//OrchardSprays
summary(OrchardSprays)
max_decrease <- max(OrchardSprays$decrease)
boxplot(max_decrease$treatment)
//OrchardSprays
summary(OrchardSprays)
max_decrease <- max(OrchardSprays$decrease)
boxplot(max_decrease$treatment, data=OrchardSprays)
//OrchardSprays
summary(OrchardSprays)
max_decrease <- max(OrchardSprays$decrease)
boxplot(max_decrease ~ treatment, data=OrchardSprays)
max_decrease <- max(OrchardSprays$decrease
summary(OrchardSprays)
max_decrease <- max(OrchardSprays$decrease)
boxplot(max_decrease ~ OrchardSprays$treatment)
summary(OrchardSprays)
max_decrease <- which.max(OrchardSprays$decrease)
boxplot(max_decrease ~ OrchardSprays$treatment)
summary(OrchardSprays)
max_decrease <- which.max(OrchardSprays$decrease)
summary(OrchardSprays)
max_decrease <- which.max(OrchardSprays$decrease)
boxplot(OrchardSprays$decrease ~ OrchardSprays$treatment)
getwd()
# Creae a vector variable and assign four string values ot the variable
strings <- c("abcd", "cdab", "cabd", "c abd")
# Find string values containing 'ab', return indices
grep("ab", strings)
# Find string values containing 'ab', return indices
grep("ab", strings, value = FALSE)
# Find string values containing 'ab', return values
grep("ab", strings, value = TRUE)
sentences = c("I like statistics", "I like bananas", "Estates and statues are expensive")
grep("stat", sentences)
sentences = c("I like statistics", "I like bananas", "Estates and statues are expensive")
grep("stat", sentences, value = TRUE)
sentences = c("I like statistics", "I like bananas", "Estates and statues are expensive")
grep("stat", "ban" sentences, value = TRUE)
sentences = c("I like statistics", "I like bananas", "Estates and statues are expensive")
grep("stat", "ban", sentences, value = TRUE)
sentences = c("I like statistics", "I like bananas", "Estates and statues are expensive")
grep("stat", sentences, value = TRUE)
winerydata <- read.csv('Wine_Data_Unclean.csv')
View(winerydata)
View(winerydata)
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
regmatches(winerydata$variety_and_region)
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
regmatches(winerydata$variety_and_region,regexpr("/",winerydata))
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
View(winerydata)
View(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
print(wine_region)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
winedata$Region <- wine_region
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
winerydata$Region <- wine_region
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
winerydata$Region <- wine_region
regionfixed _ sub("/ ",wine_region)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
winerydata$Region <- wine_region
regionfixed <- sub("/ ",wine_region)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
winerydata$Region <- wine_region
regionfixed <- sub("/ ", "",wine_region)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
winerydata$Region <- wine_region
regionfixed <- sub("/ ", "",Region)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
winerydata$Region <- wine_region
regionfixed <- sub("/ ", "",wine_region)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
regionfixed <- sub("/ ", "",wine_region)
winerydata$variety_and_region <- regionfixed
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
regionfixed <- sub("/ ", "",wine_region)
winerydata <- read.csv('Wine_Data_Unclean.csv')
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
replacements <- sub("/.+ ", "",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
replacements <- sub("/.+ ", "",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
wine_region2 <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$Region))
regionfixed2 <- sub("/ ", "",wine_region2)
winerydata$SubRegion <- regionfixed2
replacements2 <- sub("/.+ ", "",winerydata$Region)
winerydata$Region <- replacements2
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
replacements <- sub("/.+ ", "",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
wine_region2 <- regmatches(winerydata$Region, regexpr("/.+",winerydata$Region))
regionfixed2 <- sub("/ ", "",wine_region2)
winerydata$SubRegion <- regionfixed2
replacements2 <- sub("/.+ ", "",winerydata$Region)
winerydata$Region <- replacements2
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
replacements <- sub("/.+ ", "",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
View(winerydata)
View(winerydata)
replacements <- sub("/.+ ", "",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
winerydata <- read.csv('Wine_Data_Unclean.csv')
winerydata <- read.csv('Wine_Data_Unclean.csv')
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
replacements <- sub("/.+ ", "",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
replacements <- sub("/.+","",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
replacements <- sub("/.+","",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
wine_region2 <- regmatches(winerydata$Region, regexpr("/.+",winerydata$Region))
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
replacements <- sub("/.+","",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
wine_region2 <- regmatches(winerydata$Region, regexpr("/.+",winerydata$Region))
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
replacements <- sub("/.+","",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
replacements <- sub("/.+","",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
wine_region2 <- regmatches(winerydata$Region, regexpr("/.+",winerydata$Region))
regionfixed2 <- sub("/ ", "",wine_region2)
winerydata$SubRegion <- regionfixed2
replacements2 <- sub("/.+", "",winerydata$Region)
winerydata$Region <- replacements2
data("Titanic")
data(Titanic)
summary(Titanic)
str(Titanic)
countsToCase <- function(X, countcol = "Freq"){
#Get the row indicies to pull from X
idx <- rep.int(seq_len(nrow(x)),x[[countcol]])
#Drop count column
x[[countcol]] <- NULL
#Get the rows from X
x[idx,]
}
caseTita <- countsToCases(as.data.frame(Titanic))
caseTita <- countsToCases(as.data.frame(Titanic))
caseTita <- countsToCases(as.data.frame(Titanic))
countsToCases <- function(X, countcol = "Freq"){
#Get the row indicies to pull from X
idx <- rep.int(seq_len(nrow(x)),x[[countcol]])
#Drop count column
x[[countcol]] <- NULL
#Get the rows from X
x[idx,]
}
caseTita <- countsToCases(as.data.frame(Titanic))
head(caseTita)
caseTita <- countsToCases(as.data.frame(Titanic))
head(caseTita)
data("Titanic")
str(Titanic)
countsToCases <- function(X, countcol = "Freq"){
#Get the row indicies to pull from X
idx <- rep.int(seq_len(nrow(x)),x[[countcol]])
#Drop count column
x[[countcol]] <- NULL
#Get the rows from X
x[idx,]
}
caseTita <- countsToCases(as.data.frame(Titanic))
head(caseTita)
data("Titanic")
str(Titanic)
countsToCases <- function(X, countcol = "Freq"){
#Get the row indicies to pull from X
idx <- rep.int(seq_len(nrow(x)),x[[countcol]])
#Drop count column
x[[countcol]] <- NULL
#Get the rows from X
x[idx,]
}
caseTita <- countsToCases(as.data.frame(Titanic))
head(caseTita)
data("Titanic")
str(Titanic)
countsToCases <- function(X, countcol = "Freq"){
#Get the row indicies to pull from X
idx <- rep.int(seq_len(nrow(x)),x[[countcol]])
#Drop count column
x[[countcol]] <- NULL
#Get the rows from X
x[idx,]
}
caseTita <- countsToCases(as.data.frame(Titanic))
head(caseTita)
data("Titanic")
str(Titanic)
countsToCases <- function(X, countcol = "Freq"){
#Get the row indicies to pull from X
idx <- rep.int(seq_len(nrow(x)),x[[countcol]])
#Drop count column
x[[countcol]] <- NULL
#Get the rows from X
x[idx,]
}
caseTita <- countsToCases(as.data.frame(Titanic))
head(caseTita)
data("Titanic")
str(Titanic)
countsToCases <- function(X, countcol = "Freq"){
#Get the row indicies to pull from X
idx <- rep.int(seq_len(nrow(x)),x[[countcol]])
#Drop count column
x[[countcol]] <- NULL
#Get the rows from X
x[idx,]
}
caseTita <- countsToCases(as.data.frame(Titanic))
head(caseTita)
data("Titanic")
str(Titanic)
countsToCases <- function(X, countcol = "Freq"){
#Get the row indicies to pull from X
idx <- rep.int(seq_len(nrow(x)),x[[countcol]])
#Drop count column
x[[countcol]] <- NULL
#Get the rows from X
x[idx,]
}
caseTita <- countsToCases(as.data.frame(Titanic))
head(caseTita)
data("Titanic")
str(Titanic)
countsToCases <- function(X, countcol = "Freq"){
#Get the row indicies to pull from X
idx <- rep.int(seq_len(nrow(x)),x[[countcol]])
#Drop count column
x[[countcol]] <- NULL
#Get the rows from X
x[idx,]
}
caseTita <- countsToCases(as.data.frame(Titanic))
head(caseTita)
data("Titanic")
str(Titanic)
countsToCases <- function(X, countcol = "Freq"){
#Get the row indicies to pull from X
idx <- rep.int(seq_len(nrow(x)),x[[countcol]])
#Drop count column
x[[countcol]] <- NULL
#Get the rows from X
x[idx,]
}
caseTita <- countsToCases(as.data.frame(Titanic))
head(caseTita)
data("Titanic")
str(Titanic)
countsToCases <- function(X, countcol = "Freq"){
#Get the row indicies to pull from X
idx <- rep.int(seq_len(nrow(x)),x[[countcol]])
#Drop count column
x[[countcol]] <- NULL
#Get the rows from X
x[idx,]
}
caseTita <- countsToCases(as.data.frame(Titanic))
head(caseTita)
data("Titanic")
str(Titanic)
countsToCases <- function(X, countcol = "Freq"){
#Get the row indicies to pull from X
idx <- rep.int(seq_len(nrow(x)),x[[countcol]])
#Drop count column
x[[countcol]] <- NULL
#Get the rows from X
x[idx,]
}
caseTita <- countsToCases(as.data.frame(Titanic))
head(caseTita)
library(e1071)
data("Titanic")
Titanic_df = as.data.frame(Titanic)
#Getting started with Naive Bayes
#Install the package
#install.packages(“e1071”)
#Loading the library
library(e1071)
?naiveBayes #The documentation also contains an example implementation of Titanic dataset
#Next load the Titanic dataset
data(“Titanic”)
#Save into a data frame and view it
Titanic_df=as.data.frame(Titanic)
library(e1071)
#Next load the Titanic dataset
data(“Titanic”)
data(“Titanic”)
data("Titanic”)
data("Titanic")
data("Titanic")
data("Titanic")
Titanic_df=as.data.frame(Titanic)
library(e1071)
data("Titanic")
Titanic_df=as.data.frame(Titanic)
Titanic_df=as.data.frame(Titanic)
repeating_sequence=rep.int(seq_len(nrow(Titanic_df)),
Titanic_dataset$Freq=NULL
Titanic_dataset=Titanic_df[repeating_sequence,]
Titanic_dataset$Freq=NULL
repeating_sequence=rep.int(seq_len(nrow(Titanic_df)),
Titanic_dataset$Freq=NULL
Titanic_df=as.data.frame(Titanic)
repeating_sequence=rep.int(seq_len(nrow(Titanic_df)),
Titanic_dataset$Freq=NULL
Titanic_df=as.data.frame(Titanic)
#Creating data from table
repeating_sequence=rep.int(seq_len(nrow(Titanic_df)), Titanic_df$Freq) #This will repeat each combination equal to the frequency of each combination
#Create the dataset by row repetition created
Titanic_dataset=Titanic_df[repeating_sequence,]
#We no longer need the frequency, drop the feature
Titanic_dataset$Freq=NULL
Naive_Bayes_Model=naiveBayes(Survived ~., data=Titanic_dataset)
Bayes_Model
Titanic_df=as.data.frame(Titanic)
#Creating data from table
repeating_sequence=rep.int(seq_len(nrow(Titanic_df)), Titanic_df$Freq) #This will repeat each combination equal to the frequency of each combination
#Create the dataset by row repetition created
Titanic_dataset=Titanic_df[repeating_sequence,]
#We no longer need the frequency, drop the feature
Titanic_dataset$Freq=NULL
Bayes_Model=naiveBayes(Survived ~., data=Titanic_dataset)
Bayes_Model
#Prediction on the dataset
NB_Predictions=predict(Naive_Bayes_Model,Titanic_dataset)
#Confusion matrix to check accuracy
table(NB_Predictions,Titanic_dataset$Survived)
library(mlr)
install.packages("mlr")
x=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)
y=c(3,4,5,4,8,10,10,11,14,20,23,24,32,34,35,37,42,48,53,60)
#Create a data frame of the data
train=data.frame(x,y)
#Plot the dataset
plot(train,pch=16)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
train=data.frame(x,y)
x=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)
y=c(3,4,5,4,8,10,10,11,14,20,23,24,32,34,35,37,42,48,53,60)
#Create a data frame of the data
train=data.frame(x,y)
#Plot the dataset
plot(train,pch=16)
#Create a data frame of the data
train=data.frame(x,y)
#Create a data frame of the data
train=data.frame(x,y)
#Plot the dataset
plot(train,pch=16)
install.packages(rpart)
install.packages("rpart")
install.packages("randomForest")
install.packages("rattle"()
install.packages("rattle")
library(rpart)
library(randomForest)
library(rattle)
data <- read.csv("titanic.csv")
setwd("C:/Users/tknow/Desktop/datasets")
data$PassengerId <- NULL
data$Name <- NULL
data$Ticket <- NULL
data$Cabin <- NULL
data <- na.omit(data)
data$Pclass <- as.factor(data$Pclass)
data$Parch <- as.factor(data$Parch)
tree <- rpart(Survived ~ . , data=data)
print(tree$cptable)
forest <- randomForest(Survived ~ . , data=data)
print(forest)
data$Survived <- as.factor(data$Survived)
forest <- randomForest(Survived ~ . , data=data)
print(forest)
fancyRpartPlot(tree)
library(rpart)
library(randomForest)
library(rattle)
setwd("C:/Users/tknow/Desktop/datasets")
data <- read.csv("titanic.csv")
data$PassengerId <- NULL
data$Name <- NULL
data$Ticket <- NULL
data$Cabin <- NULL
data <- na.omit(data)
data$Pclass <- as.factor(data$Pclass)
data$Parch <- as.factor(data$Parch)
tree <- rpart(Survived ~ . , data=data)
print(tree$cptable)
forest <- randomForest(Survived ~ . , data=data)
print(forest)
data$Survived <- as.factor(data$Survived)
forest <- randomForest(Survived ~ . , data=data)
print(forest)
fancyRpartPlot(tree)
library(rpart)
library(randomForest)
library(rattle)
setwd("C:/Users/Admin/Documents/R-projects/Decision _Tree_Example")
data <- read.csv("titanic.csv")
data$PassengerId <- NULL
data$Name <- NULL
data$Ticket <- NULL
data$Cabin <- NULL
data <- na.omit(data)
data$Pclass <- as.factor(data$Pclass)
data$Parch <- as.factor(data$Parch)
tree <- rpart(Survived ~ . , data=data)
print(tree$cptable)
forest <- randomForest(Survived ~ . , data=data)
print(forest)
data$Survived <- as.factor(data$Survived)
forest <- randomForest(Survived ~ . , data=data)
print(forest)
fancyRpartPlot(tree)
