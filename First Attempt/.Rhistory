winerydata$Region <- regionfixed
replacements <- sub("/.+ ", "",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
replacements <- sub("/.+","",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
replacements <- sub("/.+","",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
wine_region2 <- regmatches(winerydata$Region, regexpr("/.+",winerydata$Region))
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
replacements <- sub("/.+","",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
wine_region2 <- regmatches(winerydata$Region, regexpr("/.+",winerydata$Region))
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
replacements <- sub("/.+","",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
winerydata <- read.csv('Wine_Data_Unclean.csv')
summary(winerydata)
wine_region <- regmatches(winerydata$variety_and_region, regexpr("/.+",winerydata$variety_and_region))
regionfixed <- sub("/ ", "",wine_region)
winerydata$Region <- regionfixed
replacements <- sub("/.+","",winerydata$variety_and_region)
winerydata$variety_and_region <- replacements
wine_region2 <- regmatches(winerydata$Region, regexpr("/.+",winerydata$Region))
regionfixed2 <- sub("/ ", "",wine_region2)
winerydata$SubRegion <- regionfixed2
replacements2 <- sub("/.+", "",winerydata$Region)
winerydata$Region <- replacements2
getwd()
install.packages("rpart")
install.packages("randomForest")
install.packages("rattle")
library(rpart)
library(randomForest)
library(rattle)
library(class)
library(ggplot2)
library(e1071)
#graphed every variable against house price to determine any correlation and decide whether to keep
{
install.packages("ggplot2")
library(ggplot2)
setwd("C:/Users/Admin/Documents/house_price")
TestData <- read.csv("train.csv")
TestData$MSZoning <- sub("A","1",TestData$MSZoning)
TestData$MSZoning <- sub("C","2",TestData$MSZoning)
TestData$MSZoning <- sub("FV","3",TestData$MSZoning)
TestData$MSZoning <- sub("I","4",TestData$MSZoning)
TestData$MSZoning <- sub("RH","5",TestData$MSZoning)
TestData$MSZoning <- sub("RL","6",TestData$MSZoning)
TestData$MSZoning <- sub("RM","7",TestData$MSZoning)
fixers2 <- sub("/ ","",secound_new_col)
TestData$LotFrontage[is.na(TestData$LotFrontage)] <- 0
qplot(TestData$MSSubClass, TestData$SalePrice, data= TestData )+geom_smooth(method = 'lm',formula = y~x) #no concluion reached from inital summary
qplot(TestData$MSZoning, TestData$SalePrice, data= TestData )+geom_smooth(method = 'lm',formula = y~x) #distict groupings that could help with decison trees
qplot(TestData$LotFrontage,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)#no easly desernable coralation come back and check if it effects accuracy
qplot(TestData$LotArea,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)#majority of data in the lower feald however a regression line can be seen
qplot(TestData$Street,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)# this colum is not very usefull due to only having a small number of Grvl instances
TestData$Alley <- sub("Grvl",2,TestData$Alley)
TestData$Alley <- sub("Pave",3,TestData$Alley)
TestData$Alley <-as.integer(TestData$Alley)
TestData$Alley[is.na(TestData$Alley)] <- 0
TestData$Alley <-as.factor(TestData$Alley)
qplot(TestData$Alley,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
qplot(TestData$LotShape,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regresssion avalable
TestData$LandContour <- sub("Lvl",1,TestData$LandContour)
TestData$LandContour <- sub("Bnk",2,TestData$LandContour)
TestData$LandContour <- sub("HLS",3,TestData$LandContour)
TestData$LandContour <- sub("Low",4,TestData$LandContour)
qplot(TestData$LandContour,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
qplot(TestData$Utilities,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #not enogh data to draw a conclusion from
qplot(TestData$LotConfig,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
qplot(TestData$LandSlope,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable/ majority of data in the first column/however could be potentaly usfull
qplot(TestData$Neighborhood,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #possibly important however to little corisponding data
qplot(TestData$Condition1,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #to difficult to draw a conclusion from
qplot(TestData$Condition2,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #to difficult to draw a conclusion from
qplot(TestData$BldgType,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression line however could be a usefull factor to apply
qplot(TestData$HouseStyle,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression line
########
testdata<-read.csv("C:/Users/Admin/Documents/housetest.csv")
trainingdata<-read.csv("C:/Users/Admin/Documents/housetrain.csv")
trainingprices<-read.csv("C:/Users/Admin/Documents/sample_submission.csv")
modifiedtraindata<-as.data.frame(trainingdata)
modifiedtraindata$Electrical<-sub("SBrkr", "4", modifiedtraindata$Electrical)
modifiedtraindata$Electrical<-sub("FuseA", "3", modifiedtraindata$Electrical)
modifiedtraindata$Electrical<-sub("FuseF", "2", modifiedtraindata$Electrical)
modifiedtraindata$Electrical<-sub("FuseP", "1", modifiedtraindata$Electrical)
modifiedtraindata$Electrical<-sub("Mix", "2.5", modifiedtraindata$Electrical)
qplot(Electrical, SalePrice, data=modifiedtraindata) #keep, look into more
qplot(X1stFlrSF, SalePrice, data=modifiedtraindata) + geom_smooth(method='lm',formula=y~x)#keep
qplot(X2ndFlrSF, SalePrice, data=modifiedtraindata[modifiedtraindata$X2ndFlrSF>0,]) + geom_smooth(method='lm',formula=y~x) #1 floor house skew data - keep and sort 0s
qplot(LowQualFinSF, SalePrice, data=modifiedtraindata) + geom_smooth(method='lm',formula=y~x) #disregard
qplot(GrLivArea, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #keep
qplot(BsmtFullBath, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #no correlation - no
qplot(BsmtHalfBath, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #no correlation - no
qplot(FullBath, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #decent correlation - keep
qplot(HalfBath, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #small correlation btwn 0 and 1 - no
qplot(BedroomAbvGr, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #small correlation - ?
qplot(KitchenAbvGr, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #small negative correlation - keep
modifiedtraindata$KitchenQual<-sub("Ex", "4", modifiedtraindata$KitchenQual)
modifiedtraindata$KitchenQual<-sub("Gd", "3", modifiedtraindata$KitchenQual)
modifiedtraindata$KitchenQual<-sub("TA", "2", modifiedtraindata$KitchenQual)
modifiedtraindata$KitchenQual<-sub("Fa", "1", modifiedtraindata$KitchenQual)
modifiedtraindata$KitchenQual<-sub("Po", "0", modifiedtraindata$KitchenQual)
qplot(KitchenQual, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #good correlation - keep
qplot(TotRmsAbvGrd, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #decent correlation - keep
modifiedtraindata$Functional<-trainingdata$Functional
modifiedtraindata$Functional<-sub("Typ", "7", modifiedtraindata$Functional)
modifiedtraindata$Functional<-sub("Min1", "6", modifiedtraindata$Functional)
modifiedtraindata$Functional<-sub("Min2", "5", modifiedtraindata$Functional)
modifiedtraindata$Functional<-sub("Mod", "4", modifiedtraindata$Functional)
modifiedtraindata$Functional<-sub("Maj1", "3", modifiedtraindata$Functional)
modifiedtraindata$Functional<-sub("Maj2", "2", modifiedtraindata$Functional)
modifiedtraindata$Functional<-sub("Sev", "1", modifiedtraindata$Functional)
modifiedtraindata$Functional<-sub("Sal", "0", modifiedtraindata$Functional)
qplot(Functional, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #main correlation is between Typ and ' non  typ ' - keep
qplot(Fireplaces, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #decent, could correlate between just has or doesnt have fireplace? - keep
modifiedtraindata$FireplaceQu<-sub("Ex", "4", modifiedtraindata$FireplaceQu)
modifiedtraindata$FireplaceQu<-sub("Gd", "3", modifiedtraindata$FireplaceQu)
modifiedtraindata$FireplaceQu<-sub("TA", "2", modifiedtraindata$FireplaceQu)
modifiedtraindata$FireplaceQu<-sub("Fa", "1", modifiedtraindata$FireplaceQu)
modifiedtraindata$FireplaceQu<-sub("Po", "0", modifiedtraindata$FireplaceQu)
qplot(FireplaceQu, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #good correlation, need to sort NA values - keep
modifiedtraindata$GarageType<-sub("Attchd", "3", modifiedtraindata$GarageType)
modifiedtraindata$GarageType<-sub("Basment", "2", modifiedtraindata$GarageType)
modifiedtraindata$GarageType<-sub("BuiltIn", "4", modifiedtraindata$GarageType)
modifiedtraindata$GarageType<-sub("CarPort", "0", modifiedtraindata$GarageType)
modifiedtraindata$GarageType<-sub("Detchd", "1", modifiedtraindata$GarageType)
qplot(GarageType, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #some grouping, maybe number differently - keep
qplot(GarageYrBlt, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #disregard - ?
qplot(GarageFinish, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #good correlation, maybe indicative of general house finish quality - keep
qplot(GarageCars, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #good, 4 outlier? - keep
qplot(GarageArea, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #general correlation, 0 an issue? - keep sort 0s
qplot(GarageQual, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #grouping, keep??
qplot(GarageCond, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #grouping, keep? similar to cond
qplot(PavedDrive, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #Y much higher, P and N similar - keep
qplot(WoodDeckSF, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #some correlation but 0s are an issue - ?
qplot(OpenPorchSF, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #poor correlation, maybe disregard
qplot(EnclosedPorch, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #ignore
qplot(X3SsnPorch, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #small sample size, would ignore
qplot(ScreenPorch, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #ignore
qplot(PoolArea, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #small sample size, would ignore
qplot(PoolQC, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #small sample size, would ignore
qplot(Fence, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #grouping - keep
qplot(MiscFeature, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #keep - maybe just yes and no for extras
qplot(MiscVal, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #ignore
qplot(MoSold, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #no correlation? could find mean values -
qplot(YrSold, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #no correlation
qplot(SaleType, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #could compare COD, New, WD, too small sample size for others
qplot(SaleCondition, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #abnorml yields lower prices, as does family and alloca, adjland too small sample size, others seem average
qplot(CentralAir, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #definite correlation, good 0 and 1 indicator
qplot(HeatingQC, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #good correlation
qplot(Heating, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #small sample sizes on non GasA,maybe ignore
qplot(TotalBsmtSF, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #decent
qplot(BsmtUnfSF, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #sporadic, ignore
qplot(BsmtFinSF2, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #no correlation
qplot(BsmtFinType2, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #would ignore
qplot(BsmtFinSF1, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #could no a correlation for non 0 entries
qplot(BsmtFinType1, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #decent correlation
qplot(BsmtExposure, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #only correlatoin between no basement and basement
qplot(BsmtCond, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #some correlation
qplot(BsmtQual, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #some correlation
qplot(Foundation, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #definite grouping but small size for stone and wood
qplot(ExterCond, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #significant change from fair to TA and above, ex and po small sample size
qplot(ExterQual, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #good correlation, maybe better indicator than extercond
qplot(MasVnrArea, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #sporadic correlation for non 0 values
qplot(ExterQual, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #good correlation, maybe better indicator than extercond
qplot(MasVnrArea, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #sporadic correlation for non 0 values
qplot(MasVnrType, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #some grouping
qplot(Exterior2nd, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #lots of groups, discuss further
qplot(Exterior1st, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #lots of groups, discuss further
qplot(RoofMatl, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #small sample size for non standard
qplot(RoofStyle, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #maybe some correlation, discuss
qplot(YearRemodAdd, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #inflation a factor? particularly high prices always in more recent years
qplot(YearBuilt, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #some price explosions in recent years, general trend up
qplot(OverallCond, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #a lot of maybe lazily graded 5s, lower grades have a correlation with lower price more than vice versa
qplot(OverallQual, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #very good correlation
modifiedtraindata$HouseStyle<-sub("2Story", "7", modifiedtraindata$HouseStyle)
modifiedtraindata$HouseStyle<-sub("2.5Fin", "6", modifiedtraindata$HouseStyle)
modifiedtraindata$HouseStyle<-sub("2.5Unf", "5", modifiedtraindata$HouseStyle)
modifiedtraindata$HouseStyle<-sub("1Story", "4", modifiedtraindata$HouseStyle)
modifiedtraindata$HouseStyle<-sub("1.5Fin", "3", modifiedtraindata$HouseStyle)
modifiedtraindata$HouseStyle<-sub("1.5Unf", "2", modifiedtraindata$HouseStyle)
modifiedtraindata$HouseStyle<-sub("SFoyer", "1", modifiedtraindata$HouseStyle)
modifiedtraindata$HouseStyle<-sub("SLvl", "0", modifiedtraindata$HouseStyle)
qplot(HouseStyle, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #lots of groups, discuss further
summary(TestData)
str(TestData)
qplot(HouseStyle, SalePrice, data=modifiedtraindata) +geom_smooth(method='lm', formula=y~x) #lots of groups, discuss further
}
install.packages("ggplot2")
install.packages("rpart")
install.packages("randomForest")
install.packages("rattle")
install.packages("rattle")
library(rpart)
library(randomForest)
library(rattle)
library(class)
library(ggplot2)
library(e1071)
setwd("C:/Users/Admin/Documents/R-projects/First Attempt")
TestData <- read.csv("train.csv")
cleanedtestdata<-as.data.frame(TestData)
cleanedtestdata$Id<-NULL
cleanedtestdata$LotFrontage<-NULL
cleanedtestdata$LotArea<-NULL
cleanedtestdata$Street<-NULL
cleanedtestdata$LotShape<-NULL
cleanedtestdata$LandContour<-NULL
cleanedtestdata$Utilities<-NULL
cleanedtestdata$LotConfig<-NULL
cleanedtestdata$LandSlope<-NULL
cleanedtestdata$Condition1<-NULL
cleanedtestdata$Condition2<-NULL
cleanedtestdata$HouseStyle<-NULL
cleanedtestdata$OverallCond<-NULL
cleanedtestdata$YearBuilt<-NULL
cleanedtestdata$YearRemodAdd<-NULL
cleanedtestdata$RoofStyle<-NULL
cleanedtestdata$RoofMatl<-NULL
cleanedtestdata$Exterior1st<-NULL
cleanedtestdata$Exterior2nd<-NULL
cleanedtestdata$MasVnrType<-NULL
cleanedtestdata$MasVnrArea<-NULL
cleanedtestdata$ExterQual<-NULL
cleanedtestdata$ExterCond<-NULL
cleanedtestdata$RoofMatl<-NULL
cleanedtestdata$BsmtCond<-NULL
cleanedtestdata$BsmtExposure<-NULL
cleanedtestdata$RoofMatl<-NULL
cleanedtestdata$BsmtFinSF1<-NULL
cleanedtestdata$BsmtFinSF2<-NULL
cleanedtestdata$BsmtFinType2<-NULL
cleanedtestdata$BsmtUnfSF<-NULL
cleanedtestdata$TotalBsmtSF<-NULL
cleanedtestdata$LowQualFinSF<-NULL
cleanedtestdata$RoofMatl<-NULL
cleanedtestdata$BsmtFullBath<-NULL
cleanedtestdata$BsmtHalfBath<-NULL
cleanedtestdata$HalfBath<-NULL
cleanedtestdata$BedroomAbvGr<-NULL
cleanedtestdata$KitchenAbvGr<-NULL
cleanedtestdata$Functional<-NULL
cleanedtestdata$FireplaceQu<-NULL
cleanedtestdata$GarageType<-NULL
cleanedtestdata$GarageArea<-NULL
cleanedtestdata$GarageQual<-NULL
cleanedtestdata$GarageCond<-NULL
cleanedtestdata$GarageYrBuilt<-NULL
cleanedtestdata$WoodDeckSF<-NULL
cleanedtestdata$OpenPorchSF<-NULL
cleanedtestdata$EnclosedPorch<-NULL
cleanedtestdata$X3SsnPorch<-NULL
cleanedtestdata$ScreenPorch<-NULL
cleanedtestdata$PoolArea<-NULL
cleanedtestdata$PoolQC<-NULL
cleanedtestdata$Fence<-NULL
cleanedtestdata$MiscFeature<-NULL
cleanedtestdata$MiscVal<-NULL
cleanedtestdata$MoSold<-NULL
cleanedtestdata$YrSold<-NULL
cleanedtestdata$SaleType<-NULL
#cleaning ally
cleanedtestdata$Alley <- sub("Grvl",1,cleanedtestdata$Alley)
cleanedtestdata$Alley <- sub("Pave",2,cleanedtestdata$Alley)
cleanedtestdata$Alley <-as.integer(cleanedtestdata$Alley)
cleanedtestdata$Alley[is.na(cleanedtestdata$Alley)] <- 0
cleanedtestdata$Alley <-as.factor(cleanedtestdata$Alley)
cleanedtestdata$Electrical<-sub("1",1,cleanedtestdata$Electrical)
cleanedtestdata$Electrical<-sub("FuseA",0,cleanedtestdata$Electrical)
cleanedtestdata$Electrical<-sub("FuseF",0,cleanedtestdata$Electrical)
cleanedtestdata$Electrical<-sub("FuseP",0,cleanedtestdata$Electrical)
cleanedtestdata$Electrical<-sub("Mix",0,cleanedtestdata$Electrical)
cleaneddata$Fireplaces<-sub(2,1,cleaneddata$Fireplaces)
cleaneddata$Fireplaces<-sub(3,1,cleaneddata$Fireplaces)
cleaneddata$Heating<-sub("GasA","Gas", cleaneddata$Heating)
cleaneddata$Heating<-sub("GasW","Gas", cleaneddata$Heating)
cleaneddata$Heating<-sub("Wall","NonGas", cleaneddata$Heating)
cleaneddata$Heating<-sub("Floor","NonGas", cleaneddata$Heating)
cleaneddata$Heating<-sub("OthW","NonGas", cleaneddata$Heating)
cleaneddata$Heating<-sub("Grav","NonGas", cleaneddata$Heating)
cleaneddata$PavedDrive<-sub("P","N", cleaneddata$PavedDrive)
#replace na values
cleanedtestdata$Electrical[is.na(cleanedtestdata$Electrical)]<-0
#send back to factor
cleanedtestdata$Electrical<-as.factor(cleanedtestdata$Electrical)
#replace other na values by making the variable an integer, sending NA values to 0, then sending variable back to a factor
cleanedtestdata$BsmtQual<-as.integer(cleanedtestdata$BsmtQual)
cleanedtestdata$BsmtQual[is.na(cleanedtestdata$BsmtQual)]<-0
cleanedtestdata$BsmtQual<-as.factor(cleanedtestdata$BsmtQual)
cleaneddata$MSZoning<-as.integer(cleaneddata$MSZoning)
cleaneddata$Alley<-as.integer(cleaneddata$Alley)
cleaneddata<-as.data.frame(modifiedtraindata)
library(e1071)
TestData <- read.csv("train.csv")
# SVM attempt
TestData <- read.csv("test.csv")
TrainData <- read.csv("train.csv")
setwd("C:/Users/Admin/Documents/R-projects/First Attempt")
TestData <- read.csv("train.csv")
cleanedtestdata<-as.data.frame(TestData)
cleanedtestdata$Id<-NULL
cleanedtestdata$LotFrontage<-NULL
cleanedtestdata$LotArea<-NULL
cleanedtestdata$Street<-NULL
cleanedtestdata$LotShape<-NULL
cleanedtestdata$LandContour<-NULL
cleanedtestdata$Utilities<-NULL
cleanedtestdata$LotConfig<-NULL
cleanedtestdata$LandSlope<-NULL
cleanedtestdata$Condition1<-NULL
cleanedtestdata$Condition2<-NULL
cleanedtestdata$HouseStyle<-NULL
cleanedtestdata$OverallCond<-NULL
cleanedtestdata$YearBuilt<-NULL
cleanedtestdata$YearRemodAdd<-NULL
cleanedtestdata$RoofStyle<-NULL
cleanedtestdata$RoofMatl<-NULL
cleanedtestdata$Exterior1st<-NULL
cleanedtestdata$Exterior2nd<-NULL
cleanedtestdata$MasVnrType<-NULL
cleanedtestdata$MasVnrArea<-NULL
cleanedtestdata$ExterQual<-NULL
cleanedtestdata$ExterCond<-NULL
cleanedtestdata$RoofMatl<-NULL
cleanedtestdata$BsmtCond<-NULL
cleanedtestdata$RoofMatl<-NULL
cleanedtestdata$BsmtExposure<-NULL
cleanedtestdata$BsmtFinSF1<-NULL
cleanedtestdata$BsmtFinSF2<-NULL
cleanedtestdata$BsmtFinType2<-NULL
cleanedtestdata$BsmtUnfSF<-NULL
cleanedtestdata$TotalBsmtSF<-NULL
cleanedtestdata$LowQualFinSF<-NULL
cleanedtestdata$RoofMatl<-NULL
cleanedtestdata$BsmtFullBath<-NULL
cleanedtestdata$BsmtHalfBath<-NULL
cleanedtestdata$HalfBath<-NULL
cleanedtestdata$BedroomAbvGr<-NULL
cleanedtestdata$KitchenAbvGr<-NULL
cleanedtestdata$Functional<-NULL
cleanedtestdata$FireplaceQu<-NULL
cleanedtestdata$GarageType<-NULL
cleanedtestdata$GarageArea<-NULL
cleanedtestdata$GarageQual<-NULL
cleanedtestdata$GarageCond<-NULL
cleanedtestdata$GarageYrBuilt<-NULL
cleanedtestdata$WoodDeckSF<-NULL
cleanedtestdata$OpenPorchSF<-NULL
cleanedtestdata$EnclosedPorch<-NULL
cleanedtestdata$X3SsnPorch<-NULL
cleanedtestdata$ScreenPorch<-NULL
cleanedtestdata$PoolArea<-NULL
cleanedtestdata$PoolQC<-NULL
cleanedtestdata$Fence<-NULL
cleanedtestdata$MiscFeature<-NULL
cleanedtestdata$MiscVal<-NULL
cleanedtestdata$MoSold<-NULL
cleanedtestdata$YrSold<-NULL
cleanedtestdata$SaleType<-NULL
#cleaning ally
cleanedtestdata$Alley <- sub("Grvl",1,cleanedtestdata$Alley)
cleanedtestdata$Alley <- sub("Pave",2,cleanedtestdata$Alley)
cleanedtestdata$Alley <-as.integer(cleanedtestdata$Alley)
cleanedtestdata$Alley[is.na(cleanedtestdata$Alley)] <- 0
cleanedtestdata$Alley <-as.factor(cleanedtestdata$Alley)
cleanedtestdata$Electrical<-sub("1",1,cleanedtestdata$Electrical)
cleanedtestdata$Electrical<-sub("FuseA",0,cleanedtestdata$Electrical)
cleanedtestdata$Electrical<-sub("FuseF",0,cleanedtestdata$Electrical)
cleanedtestdata$Electrical<-sub("FuseP",0,cleanedtestdata$Electrical)
cleanedtestdata$Electrical<-sub("Mix",0,cleanedtestdata$Electrical)
cleaneddata$Fireplaces<-sub(2,1,cleaneddata$Fireplaces)
cleaneddata$Fireplaces<-sub(3,1,cleaneddata$Fireplaces)
cleaneddata$Heating<-sub("GasA","Gas", cleaneddata$Heating)
cleaneddata$Heating<-sub("Wall","NonGas", cleaneddata$Heating)
cleaneddata$Heating<-sub("GasW","Gas", cleaneddata$Heating)
cleanedtestdata$BedroomAbvGr<-NULL
cleanedtestdata$KitchenAbvGr<-NULL
cleanedtestdata$Functional<-NULL
cleanedtestdata$FireplaceQu<-NULL
cleanedtestdata$GarageType<-NULL
cleanedtestdata$GarageArea<-NULL
cleanedtestdata$GarageQual<-NULL
cleanedtestdata$GarageCond<-NULL
cleanedtestdata$GarageYrBuilt<-NULL
cleanedtestdata$WoodDeckSF<-NULL
cleanedtestdata$OpenPorchSF<-NULL
cleanedtestdata$EnclosedPorch<-NULL
cleanedtestdata$X3SsnPorch<-NULL
cleanedtestdata$ScreenPorch<-NULL
cleanedtestdata$PoolArea<-NULL
cleanedtestdata$PoolQC<-NULL
cleanedtestdata$Fence<-NULL
cleanedtestdata$MiscFeature<-NULL
cleanedtestdata$MiscVal<-NULL
cleanedtestdata$MoSold<-NULL
cleanedtestdata$YrSold<-NULL
cleanedtestdata$SaleType<-NULL
#cleaning ally
cleanedtestdata$Alley <- sub("Grvl",1,cleanedtestdata$Alley)
cleanedtestdata$Alley <- sub("Pave",2,cleanedtestdata$Alley)
cleanedtestdata$Alley <-as.integer(cleanedtestdata$Alley)
cleanedtestdata$Alley[is.na(cleanedtestdata$Alley)] <- 0
cleanedtestdata$Alley <-as.factor(cleanedtestdata$Alley)
cleanedtestdata$Electrical<-sub("1",1,cleanedtestdata$Electrical)
cleanedtestdata$Electrical<-sub("FuseA",0,cleanedtestdata$Electrical)
cleanedtestdata$Electrical<-sub("FuseF",0,cleanedtestdata$Electrical)
cleanedtestdata$Electrical<-sub("FuseP",0,cleanedtestdata$Electrical)
cleanedtestdata$Electrical<-sub("Mix",0,cleanedtestdata$Electrical)
cleaneddata$Fireplaces<-sub(2,1,cleaneddata$Fireplaces)
cleaneddata$Fireplaces<-sub(3,1,cleaneddata$Fireplaces)
cleanedtestdata$Fireplaces<-sub(2,1,cleanedtestdata$Fireplaces)
cleanedtestdata$Fireplaces<-sub(3,1,cleanedtestdata$Fireplaces)
cleanedtestdata$Heating<-sub("GasA","Gas", cleanedtestdata$Heating)
cleanedtestdata$Heating<-sub("GasW","Gas", cleanedtestdata$Heating)
cleanedtestdata$Heating<-sub("Wall","NonGas", cleanedtestdata$Heating)
cleanedtestdata$Heating<-sub("Floor","NonGas", cleanedtestdata$Heating)
cleanedtestdata$Heating<-sub("OthW","NonGas", cleanedtestdata$Heating)
cleanedtestdata$Heating<-sub("Grav","NonGas", cleanedtestdata$Heating)
cleanedtestdata$PavedDrive<-sub("P","N", cleanedtestdata$PavedDrive)
#replace na values
cleanedtestdata$Electrical[is.na(cleanedtestdata$Electrical)]<-0
#send back to factor
cleanedtestdata$Electrical<-as.factor(cleanedtestdata$Electrical)
#replace other na values by making the variable an integer, sending NA values to 0, then sending variable back to a factor
cleanedtestdata$BsmtQual<-as.integer(cleanedtestdata$BsmtQual)
cleanedtestdata$BsmtQual[is.na(cleanedtestdata$BsmtQual)]<-0
cleanedtestdata$BsmtQual<-as.factor(cleanedtestdata$BsmtQual)
cleanedtestdata$BsmtFinType1<-as.integer(cleanedtestdata$BsmtFinType1)
cleanedtestdata$BsmtFinType1[is.na(cleanedtestdata$BsmtFinType1)]<-0
cleanedtestdata$BsmtFinType1<-as.factor(cleanedtestdata$BsmtFinType1)
cleanedtestdata$GarageFinish<-as.integer(cleanedtestdata$GarageFinish)
cleanedtestdata$GarageFinish[is.na(cleanedtestdata$GarageFinish)]<-0
cleanedtestdata$GarageFinish<-as.factor(cleanedtestdata$GarageFinish)
cleanedtestdata$MSZoning<-as.integer(cleanedtestdata$MSZoning)
cleanedtestdata$Alley<-as.integer(cleanedtestdata$Alley)
cleanedtestdata$Neighborhood<-as.integer(cleanedtestdata$Neighborhood)
cleanedtestdata$BldgType<-as.integer(cleanedtestdata$BldgType)
cleanedtestdata$Foundation<-as.integer(cleanedtestdata$Foundation)
cleanedtestdata$BsmtQual<-as.integer(cleanedtestdata$BsmtQual)
cleanedtestdata$BsmtFinType1<-as.integer(cleanedtestdata$BsmtFinType1)
cleanedtestdata$Heating<-as.integer(cleanedtestdata$Heating)
cleanedtestdata$HeatingQC<-as.integer(cleanedtestdata$HeatingQC)
cleanedtestdata$CentralAir<-as.integer(cleanedtestdata$CentralAir)
cleanedtestdata$Electrical<-as.integer(cleanedtestdata$Electrical)
cleanedtestdata$KitchenQual<-as.integer(cleanedtestdata$KitchenQual)
cleanedtestdata$GarageFinish<-as.integer(cleanedtestdata$GarageFinish)
cleanedtestdata$PavedDrive<-as.integer(cleanedtestdata$PavedDrive)
cleanedtestdata$SaleCondition<-as.integer(cleanedtestdata$SaleCondition)
# SVM attempt
TestData <- read.csv("test.csv")
TrainData <- read.csv("train.csv")
train
svm_model <- svm( SalePrice~ ., cleanedtestdata)
summary(svm_model)
svm_model <- svm( SalePrice~ ., cleanedtestdata)
svm_model <- svm(SalePrice~ ., cleanedtestdata)
summary(svm_model)
model_svm <- svm(cleanedtestdata, TestData)
model_svm <- svm(cleanedtestdata ~ TestData)
svm_model <- svm( SalePrice ~ ., cleanedtestdata)
svm_model <- svm( SalePrice ~ ., cleanedtestdata)
summary(svm_model)
summary(svm_model)
#Fit a model
model_svm <- svm(cleanedtestdata, TestData)
#Use predictions on the data
pred <- predict(model_svm, TestData)
#Plot the predictions and plot to see our model
points (TestData$s, pred, col = "blue", pch= 4)
#Linear model has a residuals part which we can extract
error <- model$residuals
lm_error <=- sqrt(mean(error^2))
View(leapyear)
View(leapyear)
leapyear <- function(year){
if(year%%400==0 | year%%4==0 & year%%100!=0){
return(TRUE)
}else{
return(FALSE)
}
}
leapyear(2014)
leapyear <- function(year){
if(year%%400==0 | year%%4==0 & year%%100!=0){
return(TRUE)
}else{
return(FALSE)
}
}
leapyear(2018)
leapyear <- function(year){
if(year%%400==0 | year%%4==0 & year%%100!=0){
return(TRUE)
}else{
return(FALSE)
}
}
leapyear(1984)
